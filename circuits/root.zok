/*
    1-13:方片 A-K || 14 - 26:梅花 || 27 - 39：红桃 || 39 - 52 : 黑桃 || 53.54：小王.大王）表示的一副扑克牌
    这样对数组除以13等于扑克花色（如：25/13 = 2 是红桃），对数组值取模等于扑克点数（如：25%13 = 12 是Q）

    0 没有牛; 1-9 牛1 到牛9; 10 牛10; 11 四张花牌牛牛; 12 五张花牌牛牛; 13 炸弹; 14 五小牛
*/
import "./utils/mimc7" as mimc7;
import "./utils/pack/u32/pack128" as pack128;
import "./utils/casts/u32_to_field" as u32_to_field;
import "./utils/casts/field_to_u32.zok" as field_to_u32;

// 获取扑克牌的牌面点数
def getPokerCount(u32 n) -> u32 {
    return (n % 13);
}

// 获取牛牛的牌面点数
def convertToNiuniuPokerCount(u32 n) -> u32 {
    u32 count = getPokerCount(n);
    return if ((count == 0) || (count > 10)) {10} else {count};
}

// 获取牛几
def getNiuByCards(u32[5] cards) -> u32 {
    u32 mut total = 0;
    for u32 i in 0..5 {
        total = total + cards[i];
    }

    u32 remainder = total % 10;
    u32 niu = if remainder == 0 {10} else {remainder};

    u32 n1 = if ((cards[0] + cards[1]) % 10) == remainder { niu } else {0};
    u32 n2 = if ((cards[0] + cards[2]) % 10) == remainder { niu } else {0};
    u32 n3 = if ((cards[0] + cards[3]) % 10) == remainder { niu } else {0};
    u32 n4 = if ((cards[0] + cards[4]) % 10) == remainder { niu } else {0};

    u32 n5 = if ((cards[1] + cards[2]) % 10) == remainder { niu } else {0};
    u32 n6 = if ((cards[1] + cards[3]) % 10) == remainder { niu } else {0};
    u32 n7 = if ((cards[1] + cards[4]) % 10) == remainder { niu } else {0};

    u32 n8 = if ((cards[2] + cards[3]) % 10) == remainder { niu } else {0};
    u32 n9 = if ((cards[2] + cards[4]) % 10) == remainder { niu } else {0};

    u32 n10 = if ((cards[3] + cards[4]) % 10) == remainder { niu } else {0};
    return (n1 | n2 | n3 | n4 | n5 | n6 | n7 | n8 | n9 | n10);
}

// 是否5小牛
def isSmallNiu(u32[5] cards, u32 niu) -> u32 {
    u32 mut total = 0;
    for u32 i in 0..5 {
        total = total + cards[i];
    }
    return if total < 10 {14} else {niu};
}

// 是否是炸弹 getPokerCount
def isBomb(u32[5] cards, u32 niu) -> u32 {

    //  第一个数出现的次数
    u32 i1 = if cards[0] == cards[1] {1} else {0};
    u32 i2 = if cards[0] == cards[2] {1} else {0};
    u32 i3 = if cards[0] == cards[3] {1} else {0};
    u32 i4 = if cards[0] == cards[4] {1} else {0};
    u32 d1 = i1 + i2 + i3 + i4;

    // 第二个数出现的次数
    u32 j1 = if cards[1] == cards[0] {1} else {0};
    u32 j2 = if cards[1] == cards[2] {1} else {0};
    u32 j3 = if cards[1] == cards[3] {1} else {0};
    u32 j4 = if cards[1] == cards[4] {1} else {0};
    u32 d2 = j1 + j2 + j3 + j4;

    return if (d1+d1) == 3 {13} else {niu};
}

// 全花牌牛牛
def isFiveJQK(u32[5] cards, u32 niu) -> u32 {
    u32 mut count10 = 0; // 10 出现的次数
    for u32 i in 0..5 {
        count10 = if cards[i] == 10 {count10+1} else {count10};
    }
    return if count10 == 5 {12} else {niu};
}

// 四张花牌牛牛
def isFourJQK(u32[5] cards, u32 niu) -> u32 {
    u32 mut count10 = 0; // 10 出现的次数
    for u32 i in 0..5 {
        count10 = if cards[i] == 10 {count10+1} else {count10};
    }
    return if count10 == 4 {11} else {niu};
}

// 获取扑克最大点数
def getMaxPokerCount(u32[5] cards) -> u32 {
    // 0 为 K 最大
    u32 mut max = 0;
    for u32 i in 0..5 {
        u32 convertPokerCount = if cards[i] == 0 {13} else {cards[i]};
        max = if convertPokerCount > max { convertPokerCount } else {max};
    }
    return max;
}

def getIfEqualNiuCount(u32 max1, u32 max2, field max1Hash, field max2Hash) -> field {
    return if max1 > max2 {max1Hash} else {max2Hash};
}

def shuffle(field n1, field n2) -> u32[10] {

    u32[10] mut initPoker = [-1,-1,-1,-1,-1,-1,-1,-1,-1,-1];
    u32[52] mut originPoker = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13,
                           14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26,
                           27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39,
                           40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52
                        ];

    field mut seed = n1 * n2;
    for u32 i in 0..10 {
        seed = seed ** 2;
        u32 u32Seed = field_to_u32(seed);
        u32 index = u32Seed % (51-i);
        u32 gotCard = originPoker[index];
        originPoker[index] = originPoker[51-i];
        originPoker[51-i] = gotCard;
        initPoker[i] = gotCard;
    }
    return initPoker;
}

// winHash为每个人的第一张牌的 hash 值
def turnNiuniu(u32 n1, u32 n2, u32 n3, u32 n4, u32 n5, u32 n6, u32 n7, u32 n8, u32 n9, u32 n10, field p1Hash, field p2Hash, field inputWinHash, field multiple) {

    u32[5] niuPokerList1 = [
        convertToNiuniuPokerCount(getPokerCount(n1)),
        convertToNiuniuPokerCount(getPokerCount(n2)),
        convertToNiuniuPokerCount(getPokerCount(n3)),
        convertToNiuniuPokerCount(getPokerCount(n4)),
        convertToNiuniuPokerCount(getPokerCount(n5))
        ];

    u32[5] originPokerList1 = [
        getPokerCount(n1),
        getPokerCount(n2),
        getPokerCount(n3),
        getPokerCount(n4),
        getPokerCount(n5)
        ];

    u32 niu1MaxPokerCount = getMaxPokerCount(originPokerList1);
    u32 mut niu1 = getNiuByCards(niuPokerList1);
    niu1 = isBomb(originPokerList1, niu1);
    niu1 = isSmallNiu(niuPokerList1, niu1);
    niu1 = isFourJQK(niuPokerList1, niu1);
    niu1 = isFiveJQK(niuPokerList1, niu1);

    // -------------------------------------------------------------------------------------------------------------------------

    u32[5] niuPokerList2 = [
        convertToNiuniuPokerCount(getPokerCount(n6)),
        convertToNiuniuPokerCount(getPokerCount(n7)),
        convertToNiuniuPokerCount(getPokerCount(n8)),
        convertToNiuniuPokerCount(getPokerCount(n9)),
        convertToNiuniuPokerCount(getPokerCount(n10))
        ];

    u32[5] originPokerList2 = [
        getPokerCount(n6),
        getPokerCount(n7),
        getPokerCount(n8),
        getPokerCount(n9),
        getPokerCount(n10)
        ];

    u32 niu2MaxPokerCount = getMaxPokerCount(originPokerList2);
    u32 mut niu2 = getNiuByCards(niuPokerList2);
    niu2 = isBomb(originPokerList2, niu2);
    niu2 = isSmallNiu(niuPokerList2, niu2);
    niu2 = isFourJQK(niuPokerList2, niu2);
    niu2 = isFiveJQK(niuPokerList2, niu2);

    // -------------------------------------------------------------------------------------------------------------------------
    field mut winHash = if niu1 >= niu2 {p1Hash} else {p2Hash};
    u32 winNiu = if niu1 >= niu2 {niu1} else {niu2};

    // 点数一样
    winHash = if niu1 == niu2 {getIfEqualNiuCount(niu1MaxPokerCount, niu2MaxPokerCount, p1Hash, p2Hash)} else {winHash};

    field mut winMultiple = 1;
    winMultiple = if (winNiu > 6) && (winNiu < 10) {2} else {winMultiple};
    winMultiple = if winNiu == 10 {3} else {winMultiple};
    winMultiple = if winNiu == 11 {4} else {winMultiple};
    winMultiple = if winNiu == 12 {5} else {winMultiple};
    winMultiple = if winNiu == 13 {6} else {winMultiple};
    winMultiple = if winNiu == 14 {7} else {winMultiple};

    assert(winHash == inputWinHash);
    assert(winMultiple == multiple);

    return;
}

def main(private field n1, private field n2, field winHash, field multiple) {
    u32[10] cards = shuffle(n1, n2);

    field p1Hash = mimc7::<91>(n1, 0);
    field p2Hash = mimc7::<91>(n2, 0);

    return turnNiuniu(cards[0], cards[1], cards[2], cards[3], cards[4], cards[5], cards[6], cards[7], cards[8], cards[9], p1Hash, p2Hash, winHash, multiple);
}

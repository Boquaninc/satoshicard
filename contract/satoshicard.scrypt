import "verifier.scrypt";


contract Satoshicard {

    int hash1;
    int hash2;
    PubKey user1;
    PubKey user2;
    int maxfactor;  
    public function run(SigHashPreimage txPreimage,Proof proof,int number1,int number2,int winHash,int factor)
    {
        require(Tx.checkPreimage(txPreimage));
        require(ZKSNARK.verify([winHash,factor],proof));
        PubKey winner=PubKey(b'00');
        PubKey loser=PubKey(b'00');
        if(winHash==this.hash1){
            winner=this.user1;
            loser=this.user2;
        }else if (winHash==this.hash2){
            winner=this.user2;
            loser=this.user1;
        }else {
            require(false);
        }
        int baseAmount=SigHash.value(txPreimage)/(2*this.maxfactor);
        int winnerAmount=baseAmount*(this.maxfactor+factor);
        int loserAmount=baseAmount*(this.maxfactor-factor);
        bytes script1 = Utils.buildPublicKeyHashScript(hash160(winner));
        bytes output1 = Utils.buildOutput(script1,winnerAmount);

        bytes script2 = Utils.buildPublicKeyHashScript(hash160(loser));
        bytes output2 = Utils.buildOutput(script2, loserAmount);
        require(hash256(output1+output2) == SigHash.hashOutputs(txPreimage));
    }
}

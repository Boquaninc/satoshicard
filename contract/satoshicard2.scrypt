// import "verifier.scrypt";

type FQ = int;

struct G1Point {
    FQ x;
    FQ y;
}

struct FQ2 {
    FQ x;
    FQ y;
}

struct G2Point {
    FQ2 x;
    FQ2 y;
}

struct Proof {
    G1Point a;
    G2Point b;
    G1Point c;
}


contract Satoshicard {

    int hash1;
    int hash2;
    PubKey user1;
    PubKey user2;
    int maxfactor;

    function verify(int[4] inputs, Proof proof) : bool{
        require(inputs[0]==22);
        require(inputs[1]==27);
        require(inputs[2]==this.hash2);
        require(inputs[3]==2);

        require(proof.a.x==0x2dddc80b67d41ae5d8a52dc402f08cdeb372f8e3cad434f7e2f33dd39bcdfb0c);
        require(proof.a.y==0x25643783288f7794c4f814abf086d76507f1783d1e793900ce7eb78a6ce44659);
        require(proof.b.x.x==0x05466a9d214efa30a0b0976cbf01209f6ef031c95eb7f17a2a6a54c82b1df215);
        require(proof.b.x.y==0x15e3b5fe63bb130dfa97b88733ce45e7c41bb33dc189cf8f232466bb222d4fec);
        require(proof.b.y.x==0x20e7a7610f15a639b4eb9704922e47fd3b1279b39518f2da52e9843a7aba59eb);
        require(proof.b.y.y==0x3003465623d8f9c38952b4abf4c2fefddb5449f12f9619927943c43ecc1bedec);
        require(proof.c.x==0x01cae695071bbeb0ca0adfe716a9948620e3faabaa6aa7521654d9ab253b2a51);
        require(proof.c.y==0x17f04306cf0d093cf2d544d19aa1aea9f52df35dc7521e773115eb489960997a);
        return true;
    }   
    public function run(SigHashPreimage txPreimage,Proof proof,int number1,int number2,int winHash,int factor)
    {
        require(Tx.checkPreimage(txPreimage));
        require(this.verify([number1,number2,winHash,factor],proof));
        PubKey winner=PubKey(b'00');
        PubKey loser=PubKey(b'00');
        if(winHash==this.hash1){
            winner=this.user1;
            loser=this.user2;
        }else if (winHash==this.hash2){
            winner=this.user2;
            loser=this.user1;
        }else {
            require(false);
        }
        int baseAmount=SigHash.value(txPreimage)/(2*this.maxfactor);
        int winnerAmount=baseAmount*(this.maxfactor+factor);
        int loserAmount=baseAmount*(this.maxfactor-factor);
        bytes script1 = Utils.buildPublicKeyHashScript(hash160(winner));
        bytes output1 = Utils.buildOutput(script1,winnerAmount);

        bytes script2 = Utils.buildPublicKeyHashScript(hash160(loser));
        bytes output2 = Utils.buildOutput(script2, loserAmount);
        require(hash256(output1+output2) == SigHash.hashOutputs(txPreimage));
    }
}

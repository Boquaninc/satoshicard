// import "verifier.scrypt";

type FQ = int;

struct G1Point {
    FQ x;
    FQ y;
}

struct FQ2 {
    FQ x;
    FQ y;
}

struct G2Point {
    FQ2 x;
    FQ2 y;
}

struct Proof {
    G1Point a;
    G2Point b;
    G1Point c;
}


contract Satoshicard {

    int hash1;
    int hash2;
    PubKey user1;
    PubKey user2;
    int maxfactor;


// {
//   "a": [
//     "0x1d35d09b4d5a6f93c55a65a6053f2cfe5ace7bd3d1d85e9478d5c7cd2db48f40",
//     "0x1c8b88c7325eb90ce77e194fed2ee23134462bbd4ee003d801caa85c7ee5916c"
//   ],
//   "b": [
//     [
//       "0x1a4e9896c595c90373d72c5b785622a43ec6072f6a6b6fca2d7c78395d067a37",
//       "0x162245d422eb597ec6ca19b7a866104019d8575d22978261ae409b78569d3741"
//     ],
//     [
//       "0x10828c21f9256172c5b2e16567c855492d0f5f739b06f16e008f2cf55f8ab97a",
//       "0x2e498005c335a17860c33401c66375044d958e65d0345b24f3ae8a8506b2585a"
//     ]
//   ],
//   "c": [
//     "0x1ff5222b1af26b7e42fa585f9a6a1429f3db9eda637f791207d81426c9a294af",
//     "0x1027df38c227f8037c6a7879bad60d8b18652d1d46148f864fa2efe6834c9c8f"
//   ]
// }
    function verify(int[4] inputs, Proof proof) : bool{
        require(inputs[0]==22);
        require(inputs[1]==27);
        require(inputs[2]==this.hash2);
        require(inputs[3]==2);

        require(proof.a.x==0x1d35d09b4d5a6f93c55a65a6053f2cfe5ace7bd3d1d85e9478d5c7cd2db48f40);
        require(proof.a.y==0x1c8b88c7325eb90ce77e194fed2ee23134462bbd4ee003d801caa85c7ee5916c);
        require(proof.b.x.x==0x1a4e9896c595c90373d72c5b785622a43ec6072f6a6b6fca2d7c78395d067a37);
        require(proof.b.x.y==0x162245d422eb597ec6ca19b7a866104019d8575d22978261ae409b78569d3741);
        require(proof.b.y.x==0x10828c21f9256172c5b2e16567c855492d0f5f739b06f16e008f2cf55f8ab97a);
        require(proof.b.y.y==0x2e498005c335a17860c33401c66375044d958e65d0345b24f3ae8a8506b2585a);
        require(proof.c.x==0x1ff5222b1af26b7e42fa585f9a6a1429f3db9eda637f791207d81426c9a294af);
        require(proof.c.y==0x1027df38c227f8037c6a7879bad60d8b18652d1d46148f864fa2efe6834c9c8f);
        return true;
    }   
    public function run(SigHashPreimage txPreimage,Proof proof,int number1,int number2,int winHash,int factor)
    {
        require(Tx.checkPreimage(txPreimage));
        require(this.verify([number1,number2,winHash,factor],proof));
        PubKey winner=PubKey(b'00');
        PubKey loser=PubKey(b'00');
        if(winHash==this.hash1){
            winner=this.user1;
            loser=this.user2;
        }else if (winHash==this.hash1){
            winner=this.user2;
            loser=this.user1;
        }else {
            require(false);
        }
        int baseAmount=SigHash.value(txPreimage)/(2*this.maxfactor);
        int winnerAmount=baseAmount*(this.maxfactor+factor);
        int loserAmount=baseAmount*(this.maxfactor-factor);
        bytes script1 = Utils.buildPublicKeyHashScript(hash160(winner));
        bytes output1 = Utils.buildOutput(script1,winnerAmount);

        bytes script2 = Utils.buildPublicKeyHashScript(hash160(loser));
        bytes output2 = Utils.buildOutput(script2, loserAmount);
        require(hash256(output1+output2) == SigHash.hashOutputs(txPreimage));
    }
}
